#!/bin/sh

# Repo location
readonly REPO="${HOME}/.setup"

# Locations of dotfiles
readonly DOTS="${REPO}/dotfiles"
readonly OLD="${REPO}/.backup"

# Script log location
readonly LOG="${REPO}/.install.log"

# Name of metadata CSV files for dotfiles
readonly META='.metadata'

# List of dotfiles used across all platforms
readonly SHARED_DOTFILES="git nvim"
# Packages used across all platforms
readonly SHARED_PACKAGES="python3 python-is-python3 python3-pip neovim"

print_usage(){
    cat << EOF
Usage: ${0##*/} [-hsl] [-p {wsl}]
Run setup script for specified platform.

    -h          display this help and exit
    -p PLATFORM platform for script to setup. This is required
    -s          skip linking dotfiles that exist in .backup
    -l          link dotfiles only, don't perform other operations
EOF
}

# --------------------------------------------------------------
# Parse and create links for all files in a folder
make_symlinks(){
    while read -r line; do
        local link_name=$(echo "${line}" | cut -f1 -d,)
        local link_parent=$(echo "${line}" | cut -f2 -d,)

        # Replace '~' prefix with $HOME
        case "${link_parent}" in
            "~"*)
                link_parent="${HOME}${link_parent#"~"}"
        esac

        # Skip file if it is in backup
        [ $skip_existing ] && [ -e "${OLD}/${1}/${link_name}" ] && { echo "➖ ${1}/${link_name} is already linked, skipping"; continue; }

        # Create parent folder if necessary
        [ -d "${link_parent}" ] || { echo "Creating folder ${link_parent}"; mkdir -p "${link_parent}"; }

        local link="${link_parent}/${link_name}"
        local target="${DOTS}/${1}/${link_name}"

        # Backup existing dotfile
        if [ -f "${link}" ]; then
            [ -d "${OLD}/${1}" ] || { echo "Creating backup folder ${OLD}/${1}"; mkdir -p "${OLD}/${1}"; }
            cp -f "${link}" "${OLD}/${1}/${link_name}"
        fi

        echo "Linking ${target} -> ${link}" | tee -a "${LOG}"
        sudo ln -sf "${target}" "${link}"

    done < "${DOTS}/${1}/${META}"
}

# --------------------------------------------------------------
# Configurations specific to Ubuntu on WSL

readonly WINDOWS_USER='me'
readonly WINDOWS_DRIVE='c'
readonly WINDOWS_LINK="${HOME}/win"
readonly DISTRO_NAME='Ubuntu'

# Path to be put in /etc/environment
readonly WSL_ENV_PATH="PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:\
/bin:/snap/bin:/mnt/${WINDOWS_DRIVE}/Windows/system32:/mnt/${WINDOWS_DRIVE}/Windows:\
/mnt/${WINDOWS_DRIVE}/Users/${WINDOWS_USER}/AppData/Local/Programs/Microsoft VS Code/bin:\
/mnt/${WINDOWS_DRIVE}/Windows/System32/WindowsPowerShell/v1.0/:\
/mnt/${WINDOWS_DRIVE}/Users/${WINDOWS_USER}/AppData/Local/Microsoft/WindowsApps\""

# List of files to be linked in WSL
readonly WSL_DOTFILES="${SHARED_DOTFILES} wsl"

# Files that must be linked in windows filesystem
readonly WINDOWS_DOTFILES="windows-terminal"

readonly WSL_PACKAGES="${SHARED_PACKAGES}"

# Create a windows filesystem symlink for use with windows programs
# https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/mklink
make_windows_symlinks(){
    while read -r line; do
        local link_name=$(echo "${line}" | cut -f1 -d,)
        # Windows symlink paths must be relative to windows user home folder
        local link_parent="/mnt/${WINDOWS_DRIVE}/Users/${WINDOWS_USER}/$(echo "${line}" | cut -f2 -d,)"

        # # Skip file if it is in backup
        [ $skip_existing ] && [ -e "${OLD}/${1}/${link_name}" ] && { echo "➖ ${1}/${link_name} is already linked, skipping"; continue; }

        if [ -d "${link_parent}" ]; then
            # Backup if normal file (cant parse windows symlink), otherwise must remove since mklink can't overwrite
            if [ -f "${link_parent}/${link_name}" ]; then
                [ -d "${OLD}/${1}" ] || { echo "Creating backup folder ${OLD}/${1}"; mkdir -p "${OLD}/${1}"; }
                mv -f "${link_parent}/${link_name}" "${OLD}/${1}/${link_name}"
            else
                rm -f "${link_parent}/${link_name}"
            fi

            # Create windows compatible paths for symlink
            local link="${WINDOWS_DRIVE}:\\Users\\${WINDOWS_USER}\\$(cut -f2 -d, "${DOTS}/${1}/${META}" | tr '/' '\\')\\${link_name}"
            local target="\\\\wsl\$\\${DISTRO_NAME}$(echo "${DOTS}/${1}/${link_name}" | tr '/' '\\')"

            # Create symlink using cmd.exe
            cmd.exe /c "mklink ${link} ${target}" 2>> ${LOG}
            [ $? -ne 0 ] && echo "❌ Unable to create symlink for ${1}/${link_name}. Does cmd have admin rights?" >&2
        else 
            echo "❌ ${link_parent} does not exist. Is ${1} installed?" >&2
        fi
    done < "${DOTS}/${1}/${META}"
}

setup_wsl() {

    if [ ! $link_only ]; then
        echo "--------------------------------------------------------------"
        echo "Updating and upgrading packages"
        echo "--------------------------------------------------------------"

        # sudo apt update 2>> ${LOG} && sudo apt upgrade -y 2>> ${LOG}

        echo "--------------------------------------------------------------"
        echo "Configuring SSH"
        echo "--------------------------------------------------------------"

        # ssh-keygen -t rsa -b 4096
        # ssh-agent?

        echo "--------------------------------------------------------------"
        echo "Setting /etc/environment"
        echo "--------------------------------------------------------------"
        
        echo "${WSL_ENV_PATH}" | sudo tee /etc/environment | tee -a ${LOG}

        echo "--------------------------------------------------------------"
        echo "Installing packages: ${WSL_PACKAGES}"
        echo "--------------------------------------------------------------"

        sudo apt install "${WSL_PACKAGES}" 2>> ${LOG}


        # Packages: zsh, prompt, rust, exa?

        # Switch to default: nvim, zsh, exa?

        
    fi

    echo "--------------------------------------------------------------"
    echo "Creating dotfile symlinks"
    echo "--------------------------------------------------------------"

    # Create link to Windows home
    echo "Linking /mnt/${WINDOWS_DRIVE}/Users/${WINDOWS_USER} -> ${WINDOWS_LINK}" | tee -a "${LOG}"
    ln -sf "/mnt/${WINDOWS_DRIVE}/Users/${WINDOWS_USER}" "${WINDOWS_LINK}"

    for folder in ${WINDOWS_DOTFILES}; do
        make_windows_symlinks ${folder}
    done

    for folder in ${WSL_DOTFILES}; do
        make_symlinks ${folder}
    done
}

# --------------------------------------------------------------
# Parse options and execute platform specific configuration

main() {
    # Check repo is in correct location
    [ -d "${REPO}" ] || { echo "${REPO} not found" >&2; exit 1; }
    rm -f ${LOG}

    # Get sudo privileges
    if [ $(sudo printf "") ]; then exit 1; fi

    local platform=""
    local OPTIND=1
    while getopts ":slp:h" opt; do
        case ${opt} in
            s)
                # Skip linking dotfiles that have been linked before
                skip_existing=1
                ;;
            l)
                # Only link dotfiles, don't perform other operations
                link_only=1
                ;;
            p)
                platform="${OPTARG}"
                ;;
            h)
                print_usage
                exit 0
                ;;
            \?)
                echo "Invalid option: -${OPTARG}" >&2
                print_usage >&2
                exit 1
                ;;
            :)
                echo "-${OPTARG} requires an argument." >&2
                print_usage >&2
                exit 1
                ;;
        esac
    done

    case ${platform} in
        "wsl")
            setup_wsl
            ;;
        *)
            echo "Invalid platform specified." >&2
            print_usage >&2
            exit 1
    esac 
}

main "$@"